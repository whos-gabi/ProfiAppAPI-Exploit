import aiohttp
import asyncio
import json
import datetime
import aiohttp
import asyncio
import json
import datetime
from dotenv import load_dotenv
import os
import requests
from urllib.parse import urlencode, parse_qs, urlsplit
from functions import auth_account, scan_qr_code, get_win, scan_qr_code


load_dotenv()  # Load variables from .env file

# Telegram API and credentials
TELEGRAM_BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')

# Rest of the code...

# Task schedule time (24-hour format)
SCHEDULE_HOUR = 12  # Midnight
SCHEDULE_MINUTE = 0

async def send_telegram_message_via_api(chat_id, message):
    async with aiohttp.ClientSession() as session:
        message = aiohttp.helpers.quote(message)
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage?chat_id={chat_id}&text={message}"
        try:
            async with session.post(url) as response:
                if response.status == 200:
                    print("Message sent successfully")
                else:
                    print("Failed to send message")
        except Exception as e:
            print(f"An error occurred: {e}")

async def daily_task():
    await send_telegram_message_via_api(ADMIN_ID, "Verificare status castig zilnic Profi ")
    with open('config.json') as f:
        data = json.load(f)
        if not data.get('usernames') or not data.get('qrCodes'):
            print("Invalid Config format")
            await send_telegram_message_via_api(ADMIN_ID, "Error: Invalid Config format")
            return
        else:
            with requests.Session() as session:
            # Authenticate and get wins for each account
                wins_this_week= 0
                wins_today = 0
                for username_group in data['usernames']:
                    password, phone_number = username_group  # Adjusted for clarity
                    authorization = auth_account(phone_number, password, session)
                    win = get_win(authorization, session)
                    if win == 204:
                        wins_this_week += 1
                    if win == "true":
                        msg = f"Win on: {phone_number} ðŸ¥³"
                        await send_telegram_message_via_api(ADMIN_ID, msg)
                        wins_today += 1
                    print(f"Now doing {phone_number}...")
                    print(f"Authorization token: {authorization}")
                    print(f"Win status: {win}")
                if wins_today == 0:
                    await send_telegram_message_via_api(ADMIN_ID, "No wins today ðŸ˜¢")
                await send_telegram_message_via_api(ADMIN_ID, f"Total wins this week: {wins_this_week}")

async def scheduler():
    while True:
        now = datetime.datetime.now()
        next_run = now.replace(hour=SCHEDULE_HOUR, minute=SCHEDULE_MINUTE, second=0, microsecond=0)
        if next_run < now:
            next_run += datetime.timedelta(days=1)  # Move to the next day
        
        wait_seconds = (next_run - now).total_seconds()
        print(f"Waiting for {wait_seconds} seconds until the next run.")
        
        await asyncio.sleep(wait_seconds)
        await daily_task()

async def main():
    # Initial run
    await daily_task()
    # Schedule the task to run daily
    await scheduler()

if __name__ == '__main__':
    asyncio.run(main())
