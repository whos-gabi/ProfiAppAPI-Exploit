import requests
from urllib.parse import urlencode, parse_qs, urlsplit
import json
import random
import time  

# Constants
OAUTH2_BASE_URL = 'https://auth.profi.lobyco.net/oauth2'
GAMES_BASE_URL = 'https://api.profi.lobyco.net/game/mobile-app/v1/games'
LOGIN_FORM_URL = 'https://idp.profi.lobyco.net/api/web/v1/session'
REDIRECT_URI = 'https://mobile-app/auth-redirect'
CLIENT_ID = 'mobile-app'
CHECKIN_URL = 'https://api.profi.lobyco.net/payment/mobile-app/v1/checkin'

# Helpers
BASE62 = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
BASE67 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.!~'

def get_random(alphabet, length):
    return ''.join(random.choice(alphabet) for _ in range(length))

def auth_account(phone_number, password, session):
    auth_params = {
        'response_type': 'code',
        'scope': 'checkin offline_access openid',
        'client_id': CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
        'state': get_random(BASE62, 14),
        'nonce': get_random(BASE67, 32),
        'audience': 'https://api.profi.lobyco.net/promotion'
    }
    response = session.get(f"{OAUTH2_BASE_URL}/auth?{urlencode(auth_params)}")
    login_challenge = parse_qs(urlsplit(response.url).query)['login_challenge'][0]
    response = session.post(f"{LOGIN_FORM_URL}?{urlencode({'login_challenge': login_challenge})}",
                            json={'username': phone_number, 'password': password, 'rememberMe': False})

    redirect_to = response.json().get('redirectTo', '')
    for _ in range(3):  # Follow up to 3 redirects
        if not redirect_to:
            break
        response = session.get(redirect_to, allow_redirects=False)
        redirect_to = response.headers.get('Location', '')

    code = parse_qs(urlsplit(response.headers.get('Location', '')).query).get('code', [''])[0]
    token_response = session.post(f"{OAUTH2_BASE_URL}/token", data={
        'grant_type': 'authorization_code',
        'code': code,
        'client_id': CLIENT_ID,
        'redirect_uri': REDIRECT_URI,
    }).json()

    authorization = f"Bearer {token_response['access_token']}"
    return authorization

def get_win(authorization, session):
    response = session.get(f"{GAMES_BASE_URL}/current", headers={'Authorization': authorization})
    if response.status_code == 204:
        print('No game available')
        return

    game_id = response.json()['gameId']
    start_game_response = session.post(f"{GAMES_BASE_URL}/{game_id}/start", headers={'Authorization': authorization}).json()
    search_parameters = start_game_response['gameUrl']
    win_status = parse_qs(urlsplit(search_parameters).query).get('win', [''])[0]
    print(f"Win status: {win_status}")

def check_in_qr(payment_location, authorization, session):
    # Constructs the URL with the query parameter for paymentLocation
    url = f"{CHECKIN_URL}/state?paymentLocation={payment_location}"
    response = session.get(url, headers={'Authorization': authorization})
    print(f"Check-in state response: {response.json()}, Status: {response.status_code}")

def scan_qr_code(qr_code, authorization, session):
    response = session.post(CHECKIN_URL, json={"qrCode": qr_code}, headers={'Authorization': authorization})
    print(f"QR Code: {qr_code}, Response: {response.json()}, Status: {response.status_code}")
    
    if response.status_code == 200:
        print("Good, next step")
        payment_location = response.json().get('paymentLocation')
        if payment_location:
            check_in_qr(payment_location, authorization, session)


def wait_with_message(duration):
    for remaining in range(duration, 0, -1):
        print(f"\rWaiting: {remaining}/{duration}s", end='')
        time.sleep(1)
    print()  # Move to the next line after countdown

def main():
    with open('config.json') as f:
        data = json.load(f)
        if not data.get('usernames') or not data.get('qrCodes'):
            print("Invalid Config format")
            return
        else:
            print("Config loaded successfully")
    
    with requests.Session() as session:
        # Authenticate and get wins for each account
        for username_group in data['usernames']:
            password, phone_number = username_group  # Adjusted for clarity
            print(f"Now doing {phone_number}...")
            authorization = auth_account(phone_number, password, session)
            print(f"Authorization token: {authorization}")
            get_win(authorization, session)
            print()
            # Note: Moved outside the username loop to only iterate after all users are processed
            if len(data['qrCodes']) > 0:
                print("Scanning QR codes...")
                for qr_code in data['qrCodes']:
                    scan_qr_code(qr_code, authorization, session)  # Uses the last authorization token
                    # Wait for 30 seconds before scanning the next QR code
                    wait_with_message(30)
            # Wait for 30 seconds before proceeding to the next user
            wait_with_message(30)

if __name__ == "__main__":
    main()